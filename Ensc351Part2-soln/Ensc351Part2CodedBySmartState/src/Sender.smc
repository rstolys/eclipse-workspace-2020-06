9999 4 1
6
BEGIN DATA
BEGIN GenericState 159
159 10
8 6 163 112
1
Sender_TopLevel
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 132
132 10
11 14 138 86
1
NON_CAN
0 65535 0
142
TEXTBEGIN
if (!(ctx.openErr = (ctx.openFileToTransfer() == -1)))  {
    ctx.Crcflg=true; ctx.prep1stBlk(); 
    ctx.errCnt=0; ctx.firstCrcBlk=true;
}
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 101
101 10
72 35 89 48
1
ACKNAK
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 103
103 10
46 59 66 74
1
EOT1
0 12582911 0
23
TEXTBEGIN
/*ctx.sendByte(
EOT)*/
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN FinalState 109
109 10
98 113 102 117
1
FinalState
BEGIN Mesg 112
112 20
68 20 105 33
1
1 1 16777215 65280
107
SER
(c==ACK) && ctx.bytesRd
63
TEXTBEGIN
ctx.sendBlkPrepNext(); 
ctx.errCnt=0; 
ctx.firstCrcBlk=false;
TEXTEND
BEGIN Mesg 113
113 20
66 66 91 80
1
1 1 16777215 65280
110
SER
c==NAK
18
TEXTBEGIN
ctx.sendByte(EOT);
TEXTEND
BEGIN Mesg 115
115 20
80 76 94 87
1
1 1 16777215 65280
114
SER
c==ACK
20
TEXTBEGIN
ctx.result=
"Done";
TEXTEND
BEGIN Mesg 117
117 20
66 53 105 68
1
1 1 16777215 65280
116
SER
(c==ACK) && !ctx.bytesRd
54
TEXTBEGIN
ctx.sendByte(EOT);ctx.errCnt=0; ctx.firstCrcBlk=false;
TEXTEND
BEGIN GenericState 118
118 10
15 34 32 48
1
START
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 123
123 10
90 60 107 73
1
EOTEOT
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 125
125 20
19 48 58 61
1
1 1 16777215 65280
124
SER
!ctx.openErr && ((c == NAK) || (c == 'C')) && !ctx.bytesRd
56
TEXTBEGIN
if (c==NAK) {ctx.firstCrcBlk=false;}
ctx.sendByte(EOT);
TEXTEND
BEGIN Mesg 127
127 20
92 42 118 57
1
1 1 16777215 65280
126
SER
(c==NAK ||                (c=='C' && ctx.firstCrcBlk)) && (ctx.errCnt < errB) 
31
TEXTBEGIN
ctx.resendBlk();
ctx.errCnt++;
TEXTEND
BEGIN InitialState 130
130 10
21 27 25 31
1
InitialState
BEGIN Transition 131
131 40
19 7 19 15
130 118
3 1 1 2
2 23 31 23 32 
0 23 32 23 33 
3 23 33 23 34 
BEGIN Transition 110
110 40
58 57 58 65
103 123
2 2 4 2
2 66 66 67 66 
1 67 66 89 66 
3 89 66 90 66 
BEGIN Mesg 134
134 20
8 112 95 133
1
1 1 16777215 65280
133
SER
c!=NAK
106
TEXTBEGIN
COUT << "Sender received totally unexpected char #" << c << ": " << (char) c << endl;
exit(EXIT_FAILURE);
TEXTEND
BEGIN GenericState 135
135 10
140 53 157 66
1
CAN
0 65535 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 137
137 20
139 45 158 57
1
1 1 16777215 65280
136
SER
c == CAN
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 139
139 20
138 69 164 85
1
1 1 16777215 65280
138
SER
c == CAN
53
TEXTBEGIN
ctx.result=
     "RcvCancelled";
/*ctx.clearCan()*/
TEXTEND
BEGIN Mesg 141
141 20
56 76 75 88
1
1 1 16777215 65280
140
SER
c == ACK
29
TEXTBEGIN
ctx.result=
"1st EOT ACK'd";
TEXTEND
BEGIN Note 142
142 50
97 19 135 32
1
0 0 4227327 128
170
TEXTBEGIN
Simplified Sender Statechart
7 October 2020
No dropped characters, no timeouts, 
     no cancellation via keyboard.
Copyright (c) 2020 Craig Scratchley
wcs AT sfu.ca
TEXTEND
BEGIN Mesg 144
144 20
124 97 167 111
1
1 1 16777215 65280
143
SER
c==NAK  /*&& (ctx.errCnt >= errB) */
40
TEXTBEGIN
ctx.can8();
ctx.result="ExcessiveNAKs";
TEXTEND
BEGIN Transition 145
145 40
32 33 32 41
118 101
2 3 4 1
2 32 44 33 44 
1 33 44 71 44 
3 71 44 72 44 
BEGIN Transition 116
116 40
75 74 75 82
101 103
3 2 1 3
2 80 48 80 49 
0 80 49 80 53 
1 80 53 61 53 
0 61 53 61 58 
3 61 58 61 59 
BEGIN Transition 124
124 40
12 29 12 37
118 103
3 3 4 3
2 19 48 19 49 
0 19 49 19 63 
1 19 63 45 63 
3 45 63 46 63 
BEGIN Transition 107
107 40
36 36 36 44
101 101
1 2 4 3
2 80 35 80 34 
0 80 34 80 31 
1 80 31 68 31 
0 68 31 68 38 
1 68 38 71 38 
3 71 38 72 38 
BEGIN Transition 126
126 40
60 28 60 36
101 101
2 3 3 1
2 89 44 90 44 
1 90 44 92 44 
0 92 44 92 52 
1 92 52 84 52 
0 84 52 84 49 
3 84 49 84 48 
BEGIN Transition 147
147 40
107 55 107 63
123 123
2 1 2 2
2 107 63 108 63 
1 108 63 113 63 
0 113 63 113 66 
1 113 66 108 66 
3 108 66 107 66 
BEGIN Transition 136
136 40
80 26 80 34
132 135
2 2 1 2
2 138 50 139 50 
1 139 50 148 50 
0 148 50 148 52 
3 148 52 148 53 
BEGIN Transition 140
140 40
48 57 48 65
103 153
3 2 4 2
2 56 74 56 75 
0 56 75 56 96 
1 56 96 86 96 
3 86 96 87 96 
BEGIN Transition 114
114 40
84 30 84 38
123 153
3 3 1 1
2 94 73 94 74 
0 94 74 94 89 
3 94 89 94 90 
BEGIN Transition 149
149 40
98 62 98 70
123 153
3 2 1 2
2 98 73 98 74 
0 98 74 98 86 
1 98 86 100 86 
0 100 86 100 89 
3 100 89 100 90 
BEGIN Transition 138
138 40
115 33 115 41
135 153
3 1 1 3
2 152 66 152 67 
0 152 67 152 74 
1 152 74 156 74 
0 156 74 156 87 
1 156 87 106 87 
0 106 87 106 89 
3 106 89 106 90 
BEGIN Transition 143
143 40
84 24 84 32
132 153
2 1 2 2
2 138 32 139 32 
1 139 32 160 32 
0 160 32 160 96 
1 160 96 114 96 
3 114 96 113 96 
BEGIN Transition 154
154 40
130 111 130 119
153 109
3 2 1 1
2 100 102 100 103 
0 100 103 100 112 
3 100 112 100 113 
BEGIN Transition 157
157 40
149 1 149 9
156 132
1 1 1 3
2 148 15 148 14 
0 148 14 148 11 
1 148 11 105 11 
0 105 11 105 13 
3 105 13 105 14 
BEGIN Transition 133
133 40
90 73 90 81
159 109
4 1 3 1
2 8 85 7 85 
1 7 85 5 85 
0 5 85 5 122 
1 5 122 100 122 
0 100 122 100 118 
3 100 118 100 117 
BEGIN Transition 151
151 40
15 33 15 41
118 109
4 1 4 1
2 15 44 14 44 
1 14 44 12 44 
0 12 44 12 108 
1 12 108 95 108 
0 95 108 95 115 
1 95 115 97 115 
3 97 115 98 115 
BEGIN Mesg 146
146 20
32 29 70 45
1
1 1 16777215 65280
145
SER
!ctx.openErr && (c==NAK || c=='C') && ctx.bytesRd
105
TEXTBEGIN
if (c==NAK) {ctx.Crcflg=false; 
   ctx.cs1stBlk();
   ctx.firstCrcBlk=false;}
ctx.sendBlkPrepNext();

TEXTEND
BEGIN Mesg 148
148 20
108 66 129 77
1
1 1 16777215 65280
147
SER
c==NAK &&          ctx.errCnt < errB
35
TEXTBEGIN
ctx.sendByte(EOT);
ctx.errCnt++;

TEXTEND
BEGIN Mesg 150
150 20
98 79 141 90
1
1 1 16777215 65280
149
SER
c=='C'
37
TEXTBEGIN
ctx.can8(); ctx.result="UnexpectedC";
TEXTEND
BEGIN Mesg 152
152 20
13 67 40 81
1
1 1 16777215 65280
151
SER
ctx.openErr && ((c == NAK) || (c == 'C'))
36
TEXTBEGIN
ctx.can8();
ctx.result="OpenError";
TEXTEND
BEGIN GenericState 153
153 10
87 90 113 102
1
CommonTransient
0 12632256 0
44
TEXTBEGIN
ctx.closeTransferredFile();
POST("*",CONT);
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 155
155 20
101 102 122 111
1
1 1 16777215 65280
154
CONT

0
TEXTBEGIN

TEXTEND
BEGIN InitialState 156
156 10
146 15 150 19
1
InitialState
BEGIN Note 158
158 50
105 113 160 128
1
0 0 8454143 128
184
TEXTBEGIN
The entry code:

POST("*",CONT);

in the CommonTransient transient state immediately posts a continue (CONT) event that immediately kicks the StateChart out of that (pseudo) state.
TEXTEND
END DATA
Sender
SenderX
SenderX.h

46
INCLUDE BEGIN
#include "AtomicCOUT.h"
#include <stdlib.h>

INCLUDE END
20
DECL BEGIN
#define c wParam


DECL END
Copyright (c) 2020 W. Craig Scratchley
75
DESC BEGIN
 Simple XMODEM Sender

Copyright (C) 2020 Craig Scratchley
wcs AT sfu.ca
DESC END
0
INCLUDE BEGIN

INCLUDE END
0
DECL BEGIN

DECL END
Context

0
DECL BEGIN

DECL END
Context

0
DECL BEGIN

DECL END
