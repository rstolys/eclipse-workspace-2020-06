9999 4 1
6
BEGIN DATA
BEGIN GenericState 155
155 10
3 28 163 149
1
CompleteSender_TopLevel
0 8454143 0
201
TEXTBEGIN
if (!(ctx.openErr = (ctx.openFileToTransfer() == -1)))  {
    ctx.Crcflg=true; 
    ctx.prep1stBlk(); 
    ctx.errCnt=0;  
    ctx.firstCrcBlk=true;
    ctx.KbCan = false; 
    ctx.tm(TM_VL); 
}
TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 135
135 10
7 55 131 121
1
SERcancelable
1 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 103
103 10
44 102 59 115
1
EOT1
0 8454143 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN FinalState 109
109 10
85 152 89 156
1
FinalState
BEGIN Mesg 129
129 20
105 104 133 122
1
1 1 16777215 65280
128
SER
c==NAK && (ctx.errCnt < errB) && !ctx.KbCan
32
TEXTBEGIN
ctx.sendByte(EOT); ctx.errCnt++;
TEXTEND
BEGIN Mesg 113
113 20
59 105 87 121
1
1 1 16777215 65280
110
SER
c==NAK && !ctx.KbCan
54
TEXTBEGIN
ctx.sendByte(EOT);
ctx.errCnt=0; 
ctx.tm(2*TM_SOH); 
TEXTEND
BEGIN Mesg 115
115 20
83 140 110 152
1
1 1 16777215 65280
114
SER
c==ACK
47
TEXTBEGIN
ctx.closeTransferredFile();
ctx.result="Done";
TEXTEND
BEGIN Mesg 117
117 20
26 88 77 103
1
1 1 16777215 65280
116
SER
(c==ACK) && !ctx.bytesRd && !ctx.KbCan
68
TEXTBEGIN
ctx.sendByte(EOT);ctx.errCnt=0; ctx.tm(TM_VL);ctx.firstCrcBlk=false;
TEXTEND
BEGIN Mesg 122
122 20
26 63 74 86
1
1 1 16777215 65280
120
SER
!ctx.openErr && (c==NAK || c=='C') && ctx.bytesRd
120
TEXTBEGIN
if (c==NAK) {ctx.Crcflg=false; 
   ctx.cs1stBlk();
   ctx.firstCrcBlk=false;}
ctx.sendBlkPrepNext();
ctx.tm(TM_VL); 
TEXTEND
BEGIN GenericState 123
123 10
85 102 102 115
1
EOTEOT
0 8454143 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 125
125 20
10 105 46 126
1
1 1 16777215 65280
124
SER
!ctx.openErr && !ctx.bytesRd &&          (c == NAK) || (c == 'C')
72
TEXTBEGIN
if (c==NAK) {ctx.firstCrcBlk=false;}
ctx.sendByte(EOT); ctx.tm(TM_VL); 
TEXTEND
BEGIN Mesg 127
127 20
82 84 129 104
1
1 1 16777215 65280
126
SER
(c==NAK || (c=='C' && ctx.firstCrcBlk)) && (ctx.errCnt < errB) && !ctx.KbCan
49
TEXTBEGIN
ctx.resendBlk();
ctx.errCnt++; ctx.tm(TM_VL); 

TEXTEND
BEGIN Mesg 112
112 20
76 63 134 82
1
1 1 16777215 65280
107
SER
(c==ACK) && ctx.bytesRd && !ctx.KbCan
78
TEXTBEGIN
ctx.sendBlkPrepNext(); 
ctx.errCnt=0; ctx.firstCrcBlk=false;
ctx.tm(TM_VL); 
TEXTEND
BEGIN GenericState 136
136 10
106 133 120 144
1
CAN
0 12582911 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN Mesg 141
141 20
123 129 150 139
1
1 1 16777215 65280
140
SER
c == CAN
20
TEXTBEGIN
ctx.tmPush(TM_CHAR);
TEXTEND
BEGIN Mesg 143
143 20
91 154 125 167
1
1 1 16777215 65280
142
SER
c==CAN
72
TEXTBEGIN
ctx.clearCan();
ctx.closeTransferredFile();
ctx.result="RcvCancelled";
TEXTEND
BEGIN Mesg 145
145 20
30 150 68 169
1
1 1 16777215 65280
144
TM

122
TEXTBEGIN
ctx.can8();
ctx.closeTransferredFile();
if (ctx.KbCan)
     ctx.result="KbCancelled";
else
     ctx.result="Timeout";
TEXTEND
BEGIN Mesg 147
147 20
123 149 153 166
1
1 1 16777215 65280
146
SER
ctx.KbCan
67
TEXTBEGIN
ctx.can8();
ctx.closeTransferredFile();
ctx.result="KbCancelled";
TEXTEND
BEGIN Mesg 149
149 20
100 123 116 134
1
1 1 16777215 65280
148
TM
!ctx.KbCan
12
TEXTBEGIN
ctx.tmPop();
TEXTEND
BEGIN Mesg 151
151 20
30 136 64 152
1
1 1 16777215 65280
150
SER
c==ACK
76
TEXTBEGIN
ctx.sendByte(EOT);
ctx.closeTransferredFile();
ctx.result="1st EOT ACK'd";
TEXTEND
BEGIN InitialState 152
152 10
36 125 40 129
1
InitialState
BEGIN Transition 116
116 40
75 74 75 82
101 103
3 2 1 2
2 70 91 70 92 
0 70 92 70 97 
1 70 97 51 97 
0 51 97 51 101 
3 51 101 51 102 
BEGIN Note 154
154 50
5 5 72 26
1
0 0 8454143 128
331
TEXTBEGIN
Copyright (C) 2020 Craig Scratchley, 
craig_scratchley AT alumni.sfu.ca

Sender StateChart for XMODEM file-transfer protocol.
      November, 2020
Real events are either 
      KB_C (cancel command received from keyboard, higher priority)
      SER (serial character recieved, lower priority), 
      TM (timeout occurred) 
TEXTEND
BEGIN GenericState 101
101 10
62 80 78 91
1
ACKNAK
0 8454143 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN GenericState 118
118 10
11 74 25 85
1
START
0 16777215 0
0
TEXTBEGIN

TEXTEND
0
TEXTBEGIN

TEXTEND
BEGIN InitialState 130
130 10
16 67 20 71
1
InitialState
BEGIN Transition 148
148 40
110 74 110 82
136 135
4 2 3 1
2 106 138 105 138 
1 105 138 100 138 
0 100 138 100 122 
3 100 122 100 121 
BEGIN Transition 110
110 40
58 57 58 65
103 123
2 1 4 3
2 59 105 60 105 
1 60 105 84 105 
3 84 105 85 105 
BEGIN Transition 142
142 40
85 73 85 81
136 109
3 2 2 1
2 113 144 113 145 
0 113 145 113 154 
1 113 154 90 154 
3 90 154 89 154 
BEGIN Transition 177
177 40
116 137 116 145
136 136
3 1 2 3
2 116 144 116 145 
0 116 145 116 147 
1 116 147 123 147 
0 123 147 123 140 
1 123 140 121 140 
3 121 140 120 140 
BEGIN Transition 180
180 40
100 50 100 58
135 135
1 3 2 1
2 100 55 100 54 
0 100 54 100 51 
1 100 51 136 51 
0 136 51 136 72 
1 136 72 132 72 
3 132 72 131 72 
BEGIN Mesg 171
171 20
133 88 169 106
1
1 1 16777215 65280
170
SER
c != CAN && !ctx.KbCan
12
TEXTBEGIN
ctx.tmPop();
TEXTEND
BEGIN Mesg 173
173 20
6 183 84 192
1
1 1 16777215 65280
172
KB_C

122
TEXTBEGIN
if (!ctx.openErr) {ctx.closeTransferredFile(); ctx.result="KbCancelledOpenErr"; }
else ctx.result="KbCancelledFromSTART";
TEXTEND
BEGIN Mesg 178
178 20
124 140 146 149
1
1 1 16777215 65280
177
KB_C

15
TEXTBEGIN
ctx.KbCan=true;
TEXTEND
BEGIN Mesg 181
181 20
100 41 140 53
1
1 1 16777215 65280
180
KB_C
!ctx.KbCan
49
TEXTBEGIN
ctx.KbCan = true;
ctx.tmRed(TM_VL - TM_2CHAR);

TEXTEND
BEGIN Mesg 183
183 20
4 192 67 207
1
1 1 16777215 65280
182
SER
((c=='C' && ctx.firstCrcBlk) || c==NAK) && !ctx.KbCan
74
TEXTBEGIN
ctx.can8(); 
ctx.closeTransferredFile();
ctx.result="ExcessiveNAKsOrCs";
TEXTEND
BEGIN Note 187
187 50
76 4 138 26
1
0 0 65535 255
288
TEXTBEGIN
Unless a fast simulation has been chosen ...

TM_VL (Very Long timeout) gives 60 seconds
TM_SOH (normal timeout waiting for SOH) gives 10 seconds
TM_CHAR (inter-character timeout) gives 1 second
TM_2CHAR gives a period longer than the 
           inter-character timeout of 1 sec.

TEXTEND
BEGIN Transition 188
188 40
18 64 18 72
130 118
3 1 1 2
2 18 71 18 72 
0 18 72 18 73 
3 18 73 18 74 
BEGIN Transition 124
124 40
12 29 12 37
118 103
3 3 4 3
2 15 85 15 86 
0 15 86 15 105 
1 15 105 43 105 
3 43 105 44 105 
BEGIN Transition 107
107 40
36 36 36 44
101 101
1 3 1 2
2 74 80 74 79 
0 74 79 74 77 
1 74 77 90 77 
0 90 77 90 74 
1 90 74 70 74 
0 70 74 70 79 
3 70 79 70 80 
BEGIN Transition 120
120 40
14 21 14 29
118 101
2 2 4 2
2 25 79 26 79 
1 26 79 55 79 
0 55 79 55 85 
1 55 85 61 85 
3 61 85 62 85 
BEGIN Transition 170
170 40
124 132 124 140
136 135
2 2 2 2
2 120 138 121 138 
1 121 138 160 138 
0 160 138 160 88 
1 160 88 132 88 
3 132 88 131 88 
BEGIN Transition 140
140 40
113 47 113 55
135 136
2 3 2 1
2 131 104 132 104 
1 132 104 152 104 
0 152 104 152 136 
1 152 136 121 136 
3 121 136 120 136 
BEGIN Transition 126
126 40
60 28 60 36
101 101
2 2 3 1
2 78 85 79 85 
1 79 85 81 85 
0 81 85 81 99 
1 81 99 74 99 
0 74 99 74 92 
3 74 92 74 91 
BEGIN Transition 128
128 40
99 75 99 83
123 123
2 3 2 1
2 102 111 103 111 
1 103 111 105 111 
0 105 111 105 105 
1 105 105 103 105 
3 103 105 102 105 
BEGIN Transition 153
153 40
115 21 115 29
152 135
1 1 3 3
2 38 125 38 124 
0 38 124 38 122 
3 38 122 38 121 
BEGIN Transition 194
194 40
52 111 52 119
103 103
3 2 3 1
2 51 115 51 116 
0 51 116 51 120 
1 51 120 59 120 
0 59 120 59 118 
1 59 118 54 118 
0 54 118 54 116 
3 54 116 54 115 
BEGIN Transition 196
196 40
11 77 11 85
118 109
4 1 3 1
2 11 81 10 81 
1 10 81 8 81 
0 8 81 8 171 
1 8 171 87 171 
0 87 171 87 157 
3 87 157 87 156 
BEGIN Transition 182
182 40
7 83 7 91
135 109
4 3 3 1
2 7 72 6 72 
1 6 72 4 72 
0 4 72 4 192 
1 4 192 87 192 
0 87 192 87 157 
3 87 157 87 156 
BEGIN Transition 172
172 40
10 75 10 83
118 109
4 3 3 1
2 11 77 10 77 
1 10 77 6 77 
0 6 77 6 183 
1 6 183 87 183 
0 87 183 87 157 
3 87 157 87 156 
BEGIN Transition 146
146 40
106 47 106 55
155 109
3 1 3 1
2 123 149 123 150 
0 123 150 123 183 
1 123 183 87 183 
0 87 183 87 157 
3 87 157 87 156 
BEGIN Transition 150
150 40
57 66 57 74
103 109
3 3 3 1
2 48 115 48 116 
0 48 116 48 118 
1 48 118 44 118 
0 44 118 44 140 
1 44 140 63 140 
0 63 140 63 162 
1 63 162 87 162 
0 87 162 87 157 
3 87 157 87 156 
BEGIN Transition 144
144 40
1 46 1 54
155 109
3 3 3 1
2 43 149 43 150 
0 43 150 43 154 
1 43 154 63 154 
0 63 154 63 162 
1 63 162 87 162 
0 87 162 87 157 
3 87 157 87 156 
BEGIN Transition 192
192 40
83 111 83 119
123 109
3 2 4 1
2 93 115 93 116 
0 93 116 93 126 
1 93 126 69 126 
0 69 126 69 154 
1 69 154 84 154 
3 84 154 85 154 
BEGIN Transition 114
114 40
84 30 84 38
123 109
3 1 1 1
2 97 115 97 116 
0 97 116 97 140 
1 97 140 83 140 
0 83 140 83 149 
1 83 149 87 149 
0 87 149 87 151 
3 87 151 87 152 
BEGIN Note 189
189 50
120 33 160 45
1
0 0 8454016 128
150
TEXTBEGIN
ctx.can8() should not be called immediately after the crc16/checksum for a block has been written to the medium, or some CAN characters may be purged.
TEXTEND
BEGIN Mesg 193
193 20
69 126 96 142
1
1 1 16777215 65280
192
TM

77
TEXTBEGIN
ctx.closeTransferredFile();
ctx.result="Timeout waiting for ACK of 2nd EOT";
TEXTEND
BEGIN Mesg 195
195 20
47 120 71 147
1
1 1 16777215 65280
194
SER
(c=='C' && ctx.firstCrcBlk) && (ctx.errCnt < errB) && !ctx.KbCan
47
TEXTBEGIN
ctx.sendByte(EOT); ctx.tm(TM_VL); ctx.errCnt++;
TEXTEND
BEGIN Mesg 197
197 20
8 171 47 183
1
1 1 16777215 65280
196
SER
ctx.openErr && ((c == NAK) || (c == 'C'))
36
TEXTBEGIN
ctx.can8();
ctx.result="OpenError";
TEXTEND
BEGIN Note 198
198 50
126 168 167 182
1
0 0 8454016 128
161
TEXTBEGIN
Due to a bug in SmartState studio, in this StateChart, please interpret && as &&&& -- a logical AND.  Do not interpret it as a bitwise AND as you normally would.
TEXTEND
END DATA
Sender
SenderX
SenderX.h

0
INCLUDE BEGIN

INCLUDE END
16
DECL BEGIN
#define c wParam
DECL END
Craig Scratchley, School of Engineering Science, Simon Fraser Unviersity -- wcs@sfu.ca
279
DESC BEGIN
 Copyright (C) 2020 Craig Scratchley, 
craig_scratchley AT alumni.sfu.ca

Sender StateChart for XMODEM file-transfer protocol.

Real events are either 
      SER (serial character recieved), 
      KB_C (cancel command received from keyboard)
      TM (timeout occurred) 
DESC END
0
INCLUDE BEGIN

INCLUDE END
0
DECL BEGIN

DECL END
Context

0
DECL BEGIN

DECL END
Context

0
DECL BEGIN

DECL END
