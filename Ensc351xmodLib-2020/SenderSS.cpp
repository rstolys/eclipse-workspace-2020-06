////////////////////////////////////////////////
// Generated by SmartState C++ Code Generator //
//                 DO NOT EDIT				  //
////////////////////////////////////////////////

#pragma warning(disable: 4786)
#pragma warning(disable: 4290)

//Additional Includes


#include "SenderSS.h"
#include "SenderX.h"

/*Messages
Define user specific messages in a file and
include that file in the additional includes section in 
the model.
-- FOLLOWING MESSAGES ARE USED --
SER
TM
KB_C
*/

//Additional Declarations
#define c wParam

namespace Sender_SS
{
using namespace std;
using namespace smartstate;

//State Mgr
//--------------------------------------------------------------------
SenderSS::SenderSS(SenderX* ctx, bool startMachine/*=true*/)
 : StateMgr("SenderSS"),
   myCtx(ctx)
{
	myConcStateList.push_back(new CompleteSender_TopLevel_SenderSS("CompleteSender_TopLevel_SenderSS", 0, this));

	if(startMachine)
		start();
}

SenderX& SenderSS::getCtx() const
{
	return *myCtx;
}

//Base State
//--------------------------------------------------------------------
SenderBaseState::SenderBaseState(const string& name, BaseState* parent, SenderSS* mgr)
 : BaseState(name, parent, mgr)
{
}

//--------------------------------------------------------------------
CompleteSender_TopLevel_SenderSS::CompleteSender_TopLevel_SenderSS(const string& name, BaseState* parent, SenderSS* mgr)
 : SenderBaseState(name, parent, mgr)
{
	myHistory = false;
	mySubStates.push_back(new SERcancelable_CompleteSender_TopLevel("SERcancelable_CompleteSender_TopLevel", this, mgr));
	mySubStates.push_back(new CAN_CompleteSender_TopLevel("CAN_CompleteSender_TopLevel", this, mgr));
	setType(eSuper);
}

void CompleteSender_TopLevel_SenderSS::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> CompleteSender_TopLevel_SenderSS <onEntry>");

	SenderX& ctx = getMgr()->getCtx();

	// Code from Model here
	if (!(ctx.openErr = (ctx.openFileToTransfer() == -1)))  {
	    ctx.Crcflg=true; 
	    ctx.prep1stBlk(); 
	    ctx.errCnt=0;  
	    ctx.firstCrcBlk=true;
	    ctx.KbCan = false; 
	    ctx.tm(TM_VL); 
	}
}

void CompleteSender_TopLevel_SenderSS::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< CompleteSender_TopLevel_SenderSS <onExit>");

}

void CompleteSender_TopLevel_SenderSS::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else if(mesg.message == TM)
		onTMMessage(mesg);
	else 
		super::onMessage(mesg);
}

void CompleteSender_TopLevel_SenderSS::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("CompleteSender_TopLevel_SenderSS SER <message trapped>");

	if(ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("CompleteSender_TopLevel_SenderSS SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("CompleteSender_TopLevel_SenderSS", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("CompleteSender_TopLevel_SenderSS SER <executing effect>");


		//User specified effect begin
		ctx.can8();
		ctx.closeTransferredFile();
		ctx.result="KbCancelled";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("CompleteSender_TopLevel_SenderSS SER <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

void CompleteSender_TopLevel_SenderSS::onTMMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("CompleteSender_TopLevel_SenderSS TM <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("CompleteSender_TopLevel_SenderSS TM <executing exit>");

		const BaseState* root = getMgr()->executeExit("CompleteSender_TopLevel_SenderSS", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("CompleteSender_TopLevel_SenderSS TM <executing effect>");


		//User specified effect begin
		ctx.can8();
		ctx.closeTransferredFile();
		if (ctx.KbCan)
		     ctx.result="KbCancelled";
		else
		     ctx.result="Timeout";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("CompleteSender_TopLevel_SenderSS TM <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
SERcancelable_CompleteSender_TopLevel::SERcancelable_CompleteSender_TopLevel(const string& name, BaseState* parent, SenderSS* mgr)
 : SenderBaseState(name, parent, mgr)
{
	myHistory = true;
	mySubStates.push_back(new START_SERcancelable("START_SERcancelable", this, mgr));
	mySubStates.push_back(new EOT1_SERcancelable("EOT1_SERcancelable", this, mgr));
	mySubStates.push_back(new EOTEOT_SERcancelable("EOTEOT_SERcancelable", this, mgr));
	mySubStates.push_back(new ACKNAK_SERcancelable("ACKNAK_SERcancelable", this, mgr));
	setType(eSuper);
}

void SERcancelable_CompleteSender_TopLevel::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> SERcancelable_CompleteSender_TopLevel <onEntry>");

}

void SERcancelable_CompleteSender_TopLevel::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< SERcancelable_CompleteSender_TopLevel <onExit>");

}

void SERcancelable_CompleteSender_TopLevel::onMessage(const Mesg& mesg)
{
	if(mesg.message == KB_C)
		onKB_CMessage(mesg);
	else if(mesg.message == SER)
		onSERMessage(mesg);
	else 
		super::onMessage(mesg);
}

void SERcancelable_CompleteSender_TopLevel::onKB_CMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_CompleteSender_TopLevel KB_C <message trapped>");

	if(!ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_CompleteSender_TopLevel KB_C <executing effect>");


		//User specified effect begin
		ctx.KbCan = true;
		ctx.tmRed(TM_VL - TM_2CHAR);
		
		//User specified effect end

		return;
	}

	super::onMessage(mesg);
}

void SERcancelable_CompleteSender_TopLevel::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_CompleteSender_TopLevel SER <message trapped>");

	if(((c=='C' && ctx.firstCrcBlk) || c==NAK) && !ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_CompleteSender_TopLevel SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("SERcancelable_CompleteSender_TopLevel", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_CompleteSender_TopLevel SER <executing effect>");


		//User specified effect begin
		ctx.can8(); 
		ctx.closeTransferredFile();
		ctx.result="ExcessiveNAKsOrCs";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_CompleteSender_TopLevel SER <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}
	else
	if(c == CAN)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_CompleteSender_TopLevel SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("SERcancelable_CompleteSender_TopLevel", "CAN_CompleteSender_TopLevel");
		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_CompleteSender_TopLevel SER <executing effect>");


		//User specified effect begin
		ctx.tmPush(TM_CHAR);
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("SERcancelable_CompleteSender_TopLevel SER <executing entry>");

		getMgr()->executeEntry(root, "CAN_CompleteSender_TopLevel");
		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
EOT1_SERcancelable::EOT1_SERcancelable(const string& name, BaseState* parent, SenderSS* mgr)
 : SenderBaseState(name, parent, mgr)
{
	myHistory = false;
}

void EOT1_SERcancelable::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> EOT1_SERcancelable <onEntry>");

}

void EOT1_SERcancelable::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< EOT1_SERcancelable <onExit>");

}

void EOT1_SERcancelable::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else 
		super::onMessage(mesg);
}

void EOT1_SERcancelable::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("EOT1_SERcancelable SER <message trapped>");

	if((c=='C' && ctx.firstCrcBlk) && (ctx.errCnt < errB) && !ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("EOT1_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.sendByte(EOT); ctx.tm(TM_VL); ctx.errCnt++;
		//User specified effect end

		return;
	}
	else
	if(c==NAK && !ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("EOT1_SERcancelable SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("EOT1_SERcancelable", "EOTEOT_SERcancelable");
		/* -g option specified while compilation. */
		myMgr->debugLog("EOT1_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.sendByte(EOT);
		ctx.errCnt=0; 
		ctx.tm(2*TM_SOH); 
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("EOT1_SERcancelable SER <executing entry>");

		getMgr()->executeEntry(root, "EOTEOT_SERcancelable");
		return;
	}
	else
	if(c==ACK)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("EOT1_SERcancelable SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("EOT1_SERcancelable", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("EOT1_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.sendByte(EOT);
		ctx.closeTransferredFile();
		ctx.result="1st EOT ACK'd";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("EOT1_SERcancelable SER <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
EOTEOT_SERcancelable::EOTEOT_SERcancelable(const string& name, BaseState* parent, SenderSS* mgr)
 : SenderBaseState(name, parent, mgr)
{
	myHistory = false;
}

void EOTEOT_SERcancelable::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> EOTEOT_SERcancelable <onEntry>");

}

void EOTEOT_SERcancelable::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< EOTEOT_SERcancelable <onExit>");

}

void EOTEOT_SERcancelable::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else if(mesg.message == TM)
		onTMMessage(mesg);
	else 
		super::onMessage(mesg);
}

void EOTEOT_SERcancelable::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("EOTEOT_SERcancelable SER <message trapped>");

	if(c==NAK && (ctx.errCnt < errB) && !ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("EOTEOT_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.sendByte(EOT); ctx.errCnt++;
		//User specified effect end

		return;
	}
	else
	if(c==ACK)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("EOTEOT_SERcancelable SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("EOTEOT_SERcancelable", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("EOTEOT_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.closeTransferredFile();
		ctx.result="Done";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("EOTEOT_SERcancelable SER <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

void EOTEOT_SERcancelable::onTMMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("EOTEOT_SERcancelable TM <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("EOTEOT_SERcancelable TM <executing exit>");

		const BaseState* root = getMgr()->executeExit("EOTEOT_SERcancelable", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("EOTEOT_SERcancelable TM <executing effect>");


		//User specified effect begin
		ctx.closeTransferredFile();
		ctx.result="Timeout waiting for ACK of 2nd EOT";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("EOTEOT_SERcancelable TM <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
ACKNAK_SERcancelable::ACKNAK_SERcancelable(const string& name, BaseState* parent, SenderSS* mgr)
 : SenderBaseState(name, parent, mgr)
{
	myHistory = false;
}

void ACKNAK_SERcancelable::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> ACKNAK_SERcancelable <onEntry>");

}

void ACKNAK_SERcancelable::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< ACKNAK_SERcancelable <onExit>");

}

void ACKNAK_SERcancelable::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else 
		super::onMessage(mesg);
}

void ACKNAK_SERcancelable::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("ACKNAK_SERcancelable SER <message trapped>");

	if((c==NAK || (c=='C' && ctx.firstCrcBlk)) && (ctx.errCnt < errB) && !ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("ACKNAK_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.resendBlk();
		ctx.errCnt++; ctx.tm(TM_VL); 
		
		//User specified effect end

		return;
	}
	else
	if((c==ACK) && !ctx.bytesRd && !ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("ACKNAK_SERcancelable SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("ACKNAK_SERcancelable", "EOT1_SERcancelable");
		/* -g option specified while compilation. */
		myMgr->debugLog("ACKNAK_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.sendByte(EOT);ctx.errCnt=0; ctx.tm(TM_VL);ctx.firstCrcBlk=false;
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("ACKNAK_SERcancelable SER <executing entry>");

		getMgr()->executeEntry(root, "EOT1_SERcancelable");
		return;
	}
	else
	if((c==ACK) && ctx.bytesRd && !ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("ACKNAK_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.sendBlkPrepNext(); 
		ctx.errCnt=0; ctx.firstCrcBlk=false;
		ctx.tm(TM_VL); 
		//User specified effect end

		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
START_SERcancelable::START_SERcancelable(const string& name, BaseState* parent, SenderSS* mgr)
 : SenderBaseState(name, parent, mgr)
{
	myHistory = false;
}

void START_SERcancelable::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> START_SERcancelable <onEntry>");

}

void START_SERcancelable::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< START_SERcancelable <onExit>");

}

void START_SERcancelable::onMessage(const Mesg& mesg)
{
	if(mesg.message == SER)
		onSERMessage(mesg);
	else if(mesg.message == KB_C)
		onKB_CMessage(mesg);
	else 
		super::onMessage(mesg);
}

void START_SERcancelable::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable SER <message trapped>");

	if(!ctx.openErr && !ctx.bytesRd &&          (c == NAK || c == 'C'))
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("START_SERcancelable", "EOT1_SERcancelable");
		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable SER <executing effect>");


		//User specified effect begin
		if (c==NAK) {ctx.firstCrcBlk=false;}
		ctx.sendByte(EOT); ctx.tm(TM_VL); 
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable SER <executing entry>");

		getMgr()->executeEntry(root, "EOT1_SERcancelable");
		return;
	}
	else
	if(!ctx.openErr && (c==NAK || c=='C') && ctx.bytesRd)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("START_SERcancelable", "ACKNAK_SERcancelable");
		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable SER <executing effect>");


		//User specified effect begin
		if (c==NAK) {ctx.Crcflg=false; 
		   ctx.cs1stBlk();
		   ctx.firstCrcBlk=false;}
		ctx.sendBlkPrepNext();
		ctx.tm(TM_VL); 
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable SER <executing entry>");

		getMgr()->executeEntry(root, "ACKNAK_SERcancelable");
		return;
	}
	else
	if(ctx.openErr && ((c == NAK) || (c == 'C')))
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("START_SERcancelable", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable SER <executing effect>");


		//User specified effect begin
		ctx.can8();
		ctx.result="OpenError";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable SER <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

void START_SERcancelable::onKB_CMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable KB_C <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable KB_C <executing exit>");

		const BaseState* root = getMgr()->executeExit("START_SERcancelable", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable KB_C <executing effect>");


		//User specified effect begin
		if (!ctx.openErr) {ctx.closeTransferredFile(); ctx.result="KbCancelledOpenErr"; }
		else ctx.result="KbCancelledFromSTART";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("START_SERcancelable KB_C <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

//--------------------------------------------------------------------
CAN_CompleteSender_TopLevel::CAN_CompleteSender_TopLevel(const string& name, BaseState* parent, SenderSS* mgr)
 : SenderBaseState(name, parent, mgr)
{
	myHistory = false;
}

void CAN_CompleteSender_TopLevel::onEntry()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("> CAN_CompleteSender_TopLevel <onEntry>");

}

void CAN_CompleteSender_TopLevel::onExit()
{
	/* -g option specified while compilation. */
	myMgr->debugLog("< CAN_CompleteSender_TopLevel <onExit>");

}

void CAN_CompleteSender_TopLevel::onMessage(const Mesg& mesg)
{
	if(mesg.message == TM)
		onTMMessage(mesg);
	else if(mesg.message == SER)
		onSERMessage(mesg);
	else if(mesg.message == KB_C)
		onKB_CMessage(mesg);
	else 
		super::onMessage(mesg);
}

void CAN_CompleteSender_TopLevel::onTMMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel TM <message trapped>");

	if(!ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel TM <executing exit>");

		const BaseState* root = getMgr()->executeExit("CAN_CompleteSender_TopLevel", "SERcancelable_CompleteSender_TopLevel");
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel TM <executing effect>");


		//User specified effect begin
		ctx.tmPop();
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel TM <executing entry>");

		getMgr()->executeEntry(root, "SERcancelable_CompleteSender_TopLevel");
		return;
	}

	super::onMessage(mesg);
}

void CAN_CompleteSender_TopLevel::onSERMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel SER <message trapped>");

	if(c != CAN && !ctx.KbCan)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("CAN_CompleteSender_TopLevel", "SERcancelable_CompleteSender_TopLevel");
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel SER <executing effect>");


		//User specified effect begin
		ctx.tmPop();
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel SER <executing entry>");

		getMgr()->executeEntry(root, "SERcancelable_CompleteSender_TopLevel");
		return;
	}
	else
	if(c==CAN)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel SER <executing exit>");

		const BaseState* root = getMgr()->executeExit("CAN_CompleteSender_TopLevel", "FinalState");
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel SER <executing effect>");


		//User specified effect begin
		ctx.clearCan();
		ctx.closeTransferredFile();
		ctx.result="RcvCancelled";
		//User specified effect end

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel SER <executing entry>");

		getMgr()->executeEntry(root, "FinalState");
		return;
	}

	super::onMessage(mesg);
}

void CAN_CompleteSender_TopLevel::onKB_CMessage(const Mesg& mesg)
{
	int wParam = mesg.wParam;
	int lParam = mesg.lParam;
	SenderX& ctx = getMgr()->getCtx();

		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel KB_C <message trapped>");

	if(true)
	{
		/* -g option specified while compilation. */
		myMgr->debugLog("CAN_CompleteSender_TopLevel KB_C <executing effect>");


		//User specified effect begin
		ctx.KbCan=true;
		//User specified effect end

		return;
	}

	super::onMessage(mesg);
}


} /*end namespace*/

//___________________________________vv^^vv___________________________________
